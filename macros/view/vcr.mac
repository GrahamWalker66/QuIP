
Set vcr_file no_file
Set min_panel_width 660
Set speed 1

## Mono_Viewer
#######################
Set default_viewer_posn_set 0

Define Set_Default_Viewer_Posn 1 width
If $1<800
Then	'Set x_v 10'
Else	'Set x_v 0'
Set y_v 10
Set default_viewer_posn_set 1
.

Define Mono_Viewer 0
If !$default_viewer_posn_set "Set_Default_Viewer_Posn ncols(_img)"
Viewer_For vcr_viewer _img
Posn_Window vcr_viewer $x_v $y_v
#Protect_LUT 0
Grayscale_Viewer vcr_viewer
Assign vd depth(vcr_viewer)
.


## Init_Slider
#############################
Define Init_Slider 0
Assign p1_w max($w,$min_panel_width)
#Assign p1_h 120
#Assign adjuster_h -10
#Assign button_h 41
Assign p1_h 110
Assign adjuster_h 3
Assign button_h 78
Set adjuster_name 'Frame index'
interface 
	panel vcr_panel $p1_w $p1_h
	decorate vcr_panel	
		#Set p_x $p1_w/2-100
		Set p_x 20
		Set dx 80
		position 0 $adjuster_h
		adjuster_w $adjuster_name Update_Time 0 $n_frames-1 0 $p1_w-35
		position $p_x $button_h Add_Var p_x $dx
		button "Fast Rev" FastRev_Movie
		position $p_x $button_h Add_Var p_x $dx
		button "Rev Play" RevPlay_Movie
		position $p_x $button_h Add_Var p_x $dx
		button "Rev Step" RevStep_Movie
		position $p_x $button_h Add_Var p_x $dx
		button "Pause" PausePlay_Movie
		position $p_x $button_h Add_Var p_x $dx
		button "Fwd Step" FwdStep_Movie
		position $p_x $button_h Add_Var p_x $dx
		button "Fwd Play" FwdPlay_Movie
		position $p_x $button_h Add_Var p_x $dx
		button "Fast Fwd" FastFwd_Movie
		position $p_x $button_h Add_Var p_x $dx
		button Quit exit
		position $p_x $button_h Add_Var p_x $dx
		toggle Deinterlace TogDeinterlace
	quit
	control		position vcr_panel $x_v $y_v+40+$h	show vcr_panel			quit 
quit 
.


## Update_Time
#############################
Define Update_Time 0
Assign frame_idx $slider_val

#If $pausing	'Assign frame_idx  min($frame_idx,$n_frames-2)	\
##		File_Seek $vcr_file $frame_idx			\
#		Get_Next _img $vcr_file			\
#		Display_Frame'
#
#nop

.


## Update_Slider
#############################
Define Update_Slider 1 field_idx
interface decorate vcr_panel 
	slide_pos $adjuster_name $1
quit quit
.

## PausePlay_Movie
##############################
Define PausePlay_Movie 0
If !var_exists(saved_speed) "Set saved_speed 0"
If $speed==0
  Then Unpause_Movie
  Else Pause_Movie
.

Define Pause_Movie 0
If $speed!=0 "Set saved_speed $speed"
Set speed 0
.

Define Unpause_Movie 0
Set speed $saved_speed
.

Define FastRev_Movie 0
If $speed>0 "Set speed -1"
Mul_Var speed 2
.

Define FastFwd_Movie 0
If $speed<0 "Set speed 1"
Mul_Var speed 2
.

Define FwdPlay_Movie 0
If $speed<0 "Set speed 1"
Assign speed max(1,ceil($speed/2))
.

Define RevPlay_Movie 0
If $speed>0 "Set speed -1"
Assign speed min(-1,floor($speed/2))
.

Define FwdStep_Movie 0
Pause_Movie
Increment frame_idx
.

Define RevStep_Movie 0
Pause_Movie
Decrement frame_idx
.


## Wait_For_Unpausing
##############################
#Define Wait_For_Unpausing 0
#do
#	usleep 1000
#	os events quit
#while '$pausing'
#.






## Display_Frame
#############################

Set deinterlace 0		# default value

Define TogDeinterlace 0
Set deinterlace $toggle_state
.

Define Display_Frame 0
If $deinterlace
  Then Display_Interlace
  Else Display_Vanilla
.

Define Display_Vanilla 0
# We need to rotate jpeg files, but not avi's???
#	If $depth==3 "Rotate_Colors _img"
#	If $depth==3
#		Then "Show_Bytes _img{0} rv Show_Bytes _img{1} gv Show_Bytes _img{2} bv Label3"
#		Else 'Show_Bytes _img vcr_viewer Label_Viewer vcr_viewer "$vcr_file, frame $frame_idx"'
	# this should work for color or mono
	If $vd==8&&$depth==3
		Then "Show_Bytes _img{1} vcr_viewer"
		Else "Show_Bytes _img vcr_viewer"
	If $vd==16 "Show16 _img vcr_viewer"
.

Define Display_Interlace 0
VMov field oddlines
view embed vcr_viewer field 0 0 quit
VMov field evenlines
view embed vcr_viewer field 0 nrows(field) quit
.


## Display_Image
##################################
Define Display_Image 0
#advise "-> Press <Crtl-D> to display image"
#Pause
view wait vcr_viewer quit
Get_Next _img $vcr_file
Display_Frame
advise "-> Press <Crtl-D> to exit"
Pause
exit
.

Set user_vcr_callback no_user_vcr_callback

Define Check_User_Callback 0
If strcmp('$user_vcr_callback','no_user_vcr_callback') "$user_vcr_callback"
.

Set last_displayed -1

Define Update_VCR 1 index
Assign frame_idx min(round($1),$n_frames-1)
Assign frame_idx max($frame_idx,0)
File_Seek $vcr_file $frame_idx
Get_Next _img $vcr_file
Update_Slider $frame_idx

# Display current frame only if different
If $frame_idx!=$last_displayed
  "Display_Frame Check_User_Callback Set last_displayed $frame_idx"
.


Define VCR_Loop 1 iofile
Set vcr_file $1
fileio autoclose $vcr_file no quit
Assign vcr_w ncols('$vcr_file')
Assign vcr_h nrows('$vcr_file')
Assign vcr_d depth('$vcr_file')
Assign n_frames nframes('$vcr_file')

Image _img $vcr_h $vcr_w $vcr_d u_byte

If !viewer_exists(vcr_viewer) Mono_Viewer

Label_Viewer vcr_viewer "$vcr_file"

# Init Slider
If '$n_frames>1'	Init_Slider

Zero_Time


# Image display
If '$n_frames==1' Display_Image

# Movie display
Tell_If "-> Right-click in viewer to exit"
Tell_If " "
Set frame_idx 1

# try to update the display at 60 Hz
Set want_ms 16.666

#verbose yes

do
	# Get frame
	Update_VCR $frame_idx

	# Check events
	os events quit
	If $right_button_down exit
	
#Print pausing
#	If $pausing Wait_For_Unpausing

	Assign frame_idx $frame_idx+$speed
	Assign frame_idx min($frame_idx,$n_frames-1)

	Check_Time
	If $total_ms<$want_ms "usleep 1000*($want_ms-$total_ms)"
	Add_Var want_ms 16.666
while 1
.



