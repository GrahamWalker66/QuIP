
# This version is for 16bpp

Define OLD_Set_Screen_Color 3 r g b
# How do we pack the values into 16 bits?
#
# For some strange reason, r g and b use the full 16 bit range...
# 5 6 and 5???

Assign _r $1&0xf800
Assign _g ($2>>5)&0x07e0
Assign _b ($3>>11)&0x001f

Assign v $_r|$_g|$_b
VSet _$hidden_screen $v
.

# This version is for 32 bpp

Define Set_Screen_Color 3 r g b
advise "Set_Screen_Color $1 $2 $3"
# How do we pack the values into 32 bits?

# We get spill-over if we don't print these as hex - not enough significant digits in the default...
variables format hex quit
Assign _r ($1&0xff00)<<8
Assign _g ($2&0xff00)
Assign _b ($3&0xff00)>>8

Assign v $_r|$_g|$_b
Assign h $v

# Have to put this back or bad things happen!
variables format float quit

#advise "Set_Screen_Color $1 $2 $3                    $v    $h"
VSet _$hidden_screen $v
Toggle_Screens
.

Define Toggle_Screens 0
view fb vblank quit quit
If !strcmp('$hidden_screen','screen1')
  Then S1
  Else S2
.

Define Try_Cmaps 0
Vector red_cmap 256 1 short
Vector grn_cmap 256 1 short
Vector blu_cmap 256 1 short

view
  fb
    get_cmap red_cmap grn_cmap blu_cmap
    quit
  quit
Put_Ascii red_cmap r.asc
Put_Ascii grn_cmap g.asc
Put_Ascii blu_cmap b.asc

S1

Subimage inset _screen1 100 100 100 100
Set bit 1
Set inc 100
Set x 0
repeat 4
  Set y 0
  repeat 4
    Relocate inset $x*$inc $y*$inc 0
    Print bit
    VSet inset $bit
    Assign bit $bit<<1
    Increment y
    end
  Increment x
  end

.


